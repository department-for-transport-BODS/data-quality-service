{
  "QueryLanguage": "JSONata",
  "Comment": "Data Quality Service State Machine",
  "StartAt": "Split out to initial steps",
  "States": { 
    "Split out to initial steps": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Serviced Organisation Out of Date",
          "States": {
            "Serviced Organisation Out of Date": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${ServicedOrganisationOutOfDateLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Missing Bus Working Number",
          "States": {
            "Missing Bus Working Number": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${MissingBusWorkingNumberLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Incorrect Stop Type",
          "States": {
            "Incorrect Stop Type": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${IncorrectStopTypeLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Incorrect NOC",
          "States": {
            "Incorrect NOC": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${IncorrectNocLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Data Prefetch",
          "States": {
            "Data Prefetch": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${DataPreFetchLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Reuse of ServicePatternStop Query",
              "Output": "{% $states.result.Payload %}"
            },
            "Reuse of ServicePatternStop Query": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "First Stop is Not a Timing Point",
                  "States": {
                    "First Stop is Not a Timing Point": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Arguments": {
                        "FunctionName": "${FirstStopIsNotATimingPointLambdaArn}",
                        "Payload": "{% $states.input %}"
                      },
                      "Input": "{% $states.input %}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Last Stop is Not a Timing Point",
                  "States": {
                    "Last Stop is Not a Timing Point": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Output": "{% $states.result.Payload %}",
                      "Arguments": {
                        "FunctionName": "${LastStopIsNotATimingPointLambdaArn}",
                        "Payload": "{% $states.input %}"
                      },
                      "Input": "{% $states.input %}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "No Timing Point More than 15 Minutes",
                  "States": {
                    "No Timing Point More than 15 Minutes": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Output": "{% $states.result.Payload %}",
                      "Arguments": {
                        "FunctionName": "${NoTimingPointMoreThan15MinsLambdaArn}",
                        "Payload": "{% $states.input %}"
                      },
                      "Input": "{% $states.input %}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Stop not Found in Naptan",
                  "States": {
                    "Stop not Found in Naptan": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Output": "{% $states.result.Payload %}",
                      "Arguments": {
                        "FunctionName": "${StopNotFoundInNaptanLambdaArn}",
                        "Payload": "{% $states.input %}"
                      },
                      "Input": "{% $states.input %}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Missing Journey Code",
                  "States": {
                    "Missing Journey Code": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Output": "{% $states.result.Payload %}",
                      "Arguments": {
                        "FunctionName": "${MissingJourneyCodeLambdaArn}",
                        "Payload": "{% $states.input %}"
                      },
                      "Input": "{% $states.input %}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Last Stop is Pickup Only",
                  "States": {
                    "Last Stop is Pickup Only": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Output": "{% $states.result.Payload %}",
                      "Arguments": {
                        "FunctionName": "${LastStopIsPickUpOnlyLambdaArn}",
                        "Payload": "{% $states.input %}"
                      },
                      "Input": "{% $states.input %}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "First Stop is Set Down Only",
                  "States": {
                    "First Stop is Set Down Only": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Output": "{% $states.result.Payload %}",
                      "Arguments": {
                        "FunctionName": "${FirstStopIsSetDownOnlyLambdaArn}",
                        "Payload": "{% $states.input %}"
                      },
                      "Input": "{% $states.input %}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Cancelled Service Appearing as Active",
          "States": {
            "Cancelled Service Appearing as Active": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${CancelledServiceAppearingActiveLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Duplicate Journey Code",
          "States": {
            "Duplicate Journey Code": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${DuplicateJourneyCodeLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Incorrect Licence Number",
          "States": {
            "Incorrect Licence Number": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${IncorrectLicenceNumberLambdaArn}",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        }
      ],
      "End": true
    }
  }
}