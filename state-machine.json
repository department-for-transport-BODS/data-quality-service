{
  "QueryLanguage": "JSONata",
  "Comment": "Data Quality Service State Machine",
  "StartAt": "InitialProcessInput",
  "States": {
    "StartAt": "Initial Process Input",
    "States": {
      "Initial Process Input": {
        "Type": "Pass",
        "Next": "Validate Lock Inputs",
        "Assign": {
          "revision_id": "{% $exists($states.input) ? $states.input : null %}",
          "lock_name": "dqs-semaphore",
          "concurrency_limit": 2,
          "lock_entry": "{% $uuid() %}"
        }
      },
      "Validate Lock Inputs": {
        "Type": "Choice",
        "Default": "Lock Configuration Error",
        "Choices": [
          {
            "Condition": "{% $exists($lock_name) and $type($lock_name) = 'string' and $exists($concurrency_limit) and $type($concurrency_limit) = 'number' and $exists($lock_entry) and $type($lock_entry) = 'string' %}",
            "Next": "Acquire Lock"
          }
        ]
      },
      "Lock Configuration Error": {
        "Type": "Fail",
        "Error": "InsufficientLockInput",
        "Cause": "Lock parameters are missing or invalid"
      },
      "Acquire Lock": {
        "Comment": "Acquire a lock using a conditional update to DynamoDB",
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "Arguments": {
          "TableName": "${DQSSemaphoreDynamoDbTableName}",
          "Key": {
            "LockName": {
              "S": "{% $lock_name %}"
            }
          },
          "ExpressionAttributeNames": {
            "#currentlockcount": "currentlockcount",
            "#lockownerid": "{% $lock_entry %}"
          },
          "ExpressionAttributeValues": {
            ":increase": {
              "N": "1"
            },
            ":limit": {
              "N": "{% $string($concurrency_limit) %}"
            },
            ":lockacquiredtime": {
              "S": "{% $states.context.State.EnteredTime %}"
            }
          },
          "UpdateExpression": "SET #currentlockcount = #currentlockcount + :increase, #lockownerid = :lockacquiredtime",
          "ConditionExpression": "currentlockcount <> :limit and attribute_not_exists(#lockownerid)",
          "ReturnValues": "UPDATED_NEW"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "DynamoDB.AmazonDynamoDBException"
            ],
            "MaxAttempts": 0
          },
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [
              "DynamoDB.AmazonDynamoDBException"
            ],
            "Next": "Initialize Lock Item",
            "Output": "$lockinfo.acquisitionerror"
          },
          {
            "ErrorEquals": [
              "DynamoDB.ConditionalCheckFailedException"
            ],
            "Next": "Get Current Lock Record",
            "Output": "$lockinfo.acquisitionerror"
          },
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "ParentExceptionHandler",
            "Output": "$.error"
          }
        ],
        "Next": "Initiate DQS Lambda"
      },
      "Initialize Lock Item": {
        "Comment": "Create the initial lock record if it doesn't exist",
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:putItem",
        "Arguments": {
          "TableName": "${DQSSemaphoreDynamoDbTableName}",
          "Item": {
            "LockName": {
              "S": "{% $lock_name %}"
            },
            "currentlockcount": {
              "N": "0"
            }
          },
          "ConditionExpression": "LockName <> :lockname",
          "ExpressionAttributeValues": {
            ":lockname": {
              "S": "{% $lock_name %}"
            }
          }
        },
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "Acquire Lock"
          }
        ],
        "Next": "Acquire Lock"
      },
      "Get Current Lock Record": {
        "Comment": "Check if this execution already holds a lock",
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:getItem",
        "Arguments": {
          "TableName": "${DQSSemaphoreDynamoDbTableName}",
          "ExpressionAttributeNames": {
            "#lockownerid": "{% $lock_entry %}"
          },
          "Key": {
            "LockName": {
              "S": "{% $lock_name %}"
            }
          },
          "ProjectionExpression": "#lockownerid"
        },
        "Assign": {
          "Item": "{% $states.result.Item %}",
          "ItemString": "{% $string($states.result.Item) %}"
        },
        "Output": "$lockinfo.currentlockitem",
        "Next": "Check If Lock Already Acquired"
      },
      "Check If Lock Already Acquired": {
        "Comment": "Verify if this execution already has a lock",
        "Type": "Choice",
        "Choices": [
          {
            "Condition": "{% $exists($ItemString) and $contains($ItemString, 'Z') %}",
            "Next": "Initiate DQS Lambda"
          }
        ],
        "Default": "Wait to Get Lock"
      },
      "Wait to Get Lock": {
        "Comment": "Wait before retrying to acquire the lock",
        "Type": "Wait",
        "Seconds": 30,
        "Next": "Acquire Lock"
      },
      "Initiate DQS Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${InitiateDQSLambdaArn}",
        "Payload": "{% $revision_id %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1, 
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Map",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ReleaseLockExceptionHandler",
          "Output": "$.error"
        }
      ]
    },
    "Map": {
      "Type": "Map",
      "Label": "Map",
      "MaxConcurrency": 10,
      "Next": "Pipeline Monitor Lambda",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ReleaseLockExceptionHandler",
          "Output": "$.error"
        }
      ],
      "Output": {
        "mapResults": "{% $states.result %}"
      },
      "ResultWriter": {
        "Resource": "arn:aws:states:::s3:putObject",
        "Arguments": {
          "Bucket": "${S3BucketName}",
          "Prefix": "dqs-map-results"
        }
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "ProcessInput",
        "States": {
          "ProcessInput": {
            "Type": "Pass",
            "Next": "Split out to initial steps",
            "Assign": {
              "fileId": "{% $states.input %}"
            }
          },
          "Split out to initial steps": {
            "Type": "Parallel",
            "Branches": [
              {
                "StartAt": "Serviced Organisation Out of Date",
                "States": {
                  "Serviced Organisation Out of Date": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${ServicedOrganisationOutOfDateLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "ServicedOrganisationOutOfDateExceptionHandler"
                      }
                    ],
                    "End": true
                  },
                  "ServicedOrganisationOutOfDateExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Missing Bus Working Number",
                "States": {
                  "Missing Bus Working Number": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${MissingBusWorkingNumberLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true,
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "MissingBusWorkingNumberExceptionHandler"
                      }
                    ]
                  },
                  "MissingBusWorkingNumberExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Incorrect Stop Type",
                "States": {
                  "Incorrect Stop Type": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${IncorrectStopTypeLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true,
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "IncorrectStopTypeExceptionHandler"
                      }
                    ]
                  },
                  "IncorrectStopTypeExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Incorrect NOC",
                "States": {
                  "Incorrect NOC": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${IncorrectNocLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true,
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "IncorrectNocExceptionHandler"
                      }
                    ]
                  },
                  "IncorrectNocExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Data Prefetch",
                "States": {
                  "Data Prefetch": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Arguments": {
                      "FunctionName": "${DataPreFetchLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "Next": "Reuse of ServicePatternStop Query",
                    "Output": "{% $states.result.Payload %}",
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "DataPrefetchExceptionHandler"
                      }
                    ]
                  },
                  "DataPrefetchExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  },
                  "Reuse of ServicePatternStop Query": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "First Stop is Not a Timing Point",
                        "States": {
                          "First Stop is Not a Timing Point": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Arguments": {
                              "FunctionName": "${FirstStopIsNotATimingPointLambdaArn}",
                              "Payload": "{% $fileId %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.Unknown",
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true,
                            "Catch": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "Next": "FirstStopIsNotATimingPointExceptionHandler"
                              }
                            ]
                          },
                          "FirstStopIsNotATimingPointExceptionHandler": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${CheckErrorLambdaArn}",
                              "Payload": "{% $states.input %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Last Stop is Not a Timing Point",
                        "States": {
                          "Last Stop is Not a Timing Point": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${LastStopIsNotATimingPointLambdaArn}",
                              "Payload": "{% $fileId %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.Unknown",
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true,
                            "Catch": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "Next": "LastStopIsSetDownOnlyExceptionHandler"
                              }
                            ]
                          },
                          "LastStopIsSetDownOnlyExceptionHandler": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${CheckErrorLambdaArn}",
                              "Payload": "{% $states.input %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "No Timing Point More than 15 Minutes",
                        "States": {
                          "No Timing Point More than 15 Minutes": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${NoTimingPointMoreThan15MinsLambdaArn}",
                              "Payload": "{% $fileId %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.Unknown",
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true,
                            "Catch": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "Next": "NoTimingPointMoreThan15MinsExceptionHandler"
                              }
                            ]
                          },
                          "NoTimingPointMoreThan15MinsExceptionHandler": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${CheckErrorLambdaArn}",
                              "Payload": "{% $states.input %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Stop not Found in Naptan",
                        "States": {
                          "Stop not Found in Naptan": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${StopNotFoundInNaptanLambdaArn}",
                              "Payload": "{% $fileId %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.Unknown",
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true,
                            "Catch": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "Next": "StopNotFoundInNaptanExceptionHandler"
                              }
                            ]
                          },
                          "StopNotFoundInNaptanExceptionHandler": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${CheckErrorLambdaArn}",
                              "Payload": "{% $states.input %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Missing Journey Code",
                        "States": {
                          "Missing Journey Code": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${MissingJourneyCodeLambdaArn}",
                              "Payload": "{% $fileId %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.Unknown",
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true,
                            "Catch": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "Next": "MissingJourneyCodeExceptionHandler"
                              }
                            ]
                          },
                          "MissingJourneyCodeExceptionHandler": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${CheckErrorLambdaArn}",
                              "Payload": "{% $states.input %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Last Stop is Pickup Only",
                        "States": {
                          "Last Stop is Pickup Only": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${LastStopIsPickUpOnlyLambdaArn}",
                              "Payload": "{% $fileId %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.Unknown",
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true,
                            "Catch": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "Next": "LastStopIsPickUpOnlyExceptionHandler"
                              }
                            ]
                          },
                          "LastStopIsPickUpOnlyExceptionHandler": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${CheckErrorLambdaArn}",
                              "Payload": "{% $states.input %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "First Stop is Set Down Only",
                        "States": {
                          "First Stop is Set Down Only": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${FirstStopIsSetDownOnlyLambdaArn}",
                              "Payload": "{% $fileId %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.Unknown",
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true,
                            "Catch": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "Next": "FirstStopIsSetDownOnlyExceptionHandler"
                              }
                            ]
                          },
                          "FirstStopIsSetDownOnlyExceptionHandler": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Output": "{% $states.result.Payload %}",
                            "Arguments": {
                              "FunctionName": "${CheckErrorLambdaArn}",
                              "Payload": "{% $states.input %}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Cancelled Service Appearing as Active",
                "States": {
                  "Cancelled Service Appearing as Active": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CancelledServiceAppearingActiveLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true,
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "CancelledServiceAppearingActiveExceptionHandler"
                      }
                    ]
                  },
                  "CancelledServiceAppearingActiveExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Duplicate Journey Code",
                "States": {
                  "Duplicate Journey Code": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${DuplicateJourneyCodeLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true,
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "DuplicateJourneyCodeExceptionHandler"
                      }
                    ]
                  },
                  "DuplicateJourneyCodeExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Incorrect Licence Number",
                "States": {
                  "Incorrect Licence Number": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${IncorrectLicenceNumberLambdaArn}",
                      "Payload": "{% $fileId %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true,
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "Next": "IncorrectLicenceNumExceptionHandler"
                      }
                    ]
                  },
                  "IncorrectLicenceNumExceptionHandler": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "${CheckErrorLambdaArn}",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              }
            ],
            "End": true,
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Next": "SplitOutToInitialStepsExceptionHandler"
              }
            ]
          },
          "SplitOutToInitialStepsExceptionHandler": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Output": "{% $states.result.Payload %}",
            "Arguments": {
              "FunctionName": "${CheckErrorLambdaArn}",
              "Payload": "{% $states.input %}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2,
                "JitterStrategy": "FULL"
              }
            ],
            "End": true
          }
        }
      }
    },
    "Pipeline Monitor Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${PipelineMonitorLambdaArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.Unknown",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Release Lock",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ReleaseLockExceptionHandler",
          "Output": "$.error"
        }
      ]
    },
    "Release Lock": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Arguments": {
        "TableName": "${DQSTableSemaphore}",
        "Key": {
          "LockName": {
            "S": "{% $lock_name %}"
          }
        },
        "ExpressionAttributeNames": {
          "#currentlockcount": "currentlockcount",
          "#lockownerid": "{% $lock_entry %}"
        },
        "ExpressionAttributeValues": {
          ":decrease": {
            "N": "1"
          }
        },
        "UpdateExpression": "SET #currentlockcount = #currentlockcount - :decrease REMOVE #lockownerid",
        "ConditionExpression": "attribute_exists(#lockownerid)",
        "ReturnValues": "UPDATED_NEW"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "Next": "Success"
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ParentExceptionHandler",
          "Output": "$.error"
        }
      ],
      "Next": "Success"
    },
    "ReleaseLockExceptionHandler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Arguments": {
        "TableName": "${DQSSemaphoreDynamoDbTableName}",
        "Key": {
          "LockName": {
            "S": "{% $lock_name %}"
          }
        },
        "ExpressionAttributeNames": {
          "#currentlockcount": "currentlockcount",
          "#lockownerid": "{% $lock_entry %}"
        },
        "ExpressionAttributeValues": {
          ":decrease": {
            "N": "1"
          }
        },
        "UpdateExpression": "SET #currentlockcount = #currentlockcount - :decrease REMOVE #lockownerid",
        "ConditionExpression": "attribute_exists(#lockownerid)",
        "ReturnValues": "UPDATED_NEW"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 1.5
        }
      ],
      "Next": "ParentExceptionHandler",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ParentExceptionHandler",
          "Output": "$.releaseError"
        }
      ]
    },
    "ParentExceptionHandler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${GeneralErrorLambdaArn}",
        "Payload":{
          "Error": "{% $states.input %}",
          "revision_id": "{% $revision_id %}"
          }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
