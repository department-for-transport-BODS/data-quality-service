
name: build and deploy application
run-name: build and deploy application from ${{ github.ref_name }} @ ${{ (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) && 'prod' ||
    github.ref_name == 'uat' && 'uat' ||
    github.ref_name == 'test' && 'test' || 'dev' }}

on:
  workflow_dispatch:
  push:
    branches:
    - dev
    - test
    - uat

concurrency:
  group: ${{ github.workflow }}-${{ (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) && 'prod' ||
    github.ref_name == 'uat' && 'uat' ||
    github.ref_name == 'test' && 'test' || 'dev' }}
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  RC_ENV: ${{ (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) && 'prod' ||
    github.ref_name == 'uat' && 'uat' ||
    github.ref_name == 'test' && 'test' || 'dev' }}
  # RC_DST_PREFIX: ${{ vars.DEPLOYMENT_ARTEFACTS_S3_BUCKET_PREFIX }}

jobs:
  validation:
    runs-on: pcoe-runner-linux-small-prod
    outputs:
      VERSION: ${{ steps.increment.outputs.VERSION }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      # - name: setup node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18

      - name: validate job parameters
        run: |
          echo """ \
            Executing build and deploy job using parameters:
              (Parameter Environment) - $RC_ENV
          """

      - name: increment the version
        id: increment
        run: |          
          if [[ ${GITHUB_REF_NAME} != 'main' ]]; then
            echo "[INFO] Running on a feature branch, skipping version increment"
            echo "VERSION=${GITHUB_REF_NAME//\//-}" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] TBD"
            ### LOGIC TO FULLY IMPLEMENT (TBD)
            # # install yq for parsing yaml files
            # sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && \
            #   sudo chmod 755 /usr/bin/yq

            # npm install semver
            # current_version=$(yq e '.version' VERSION)
            # new_version=$(node -p "const semver = require('semver'); semver.inc('${current_version#v}', '$RC_TYP', false)")
            # echo "[INFO] New application version v${new_version}"
            
            # # outputs
            # echo "VERSION=v${new_version}" >> "$GITHUB_OUTPUT"
          fi

  build-deploy:
    runs-on: pcoe-runner-linux-small-prod
    needs: validation

    permissions:
      id-token: write
      contents: read

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: setup sam
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-app-build-deploy
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: get stack name
        id: get-stack
        uses: mikefarah/yq@v4.42.1
        with:
          cmd: yq -r '."${{ env.RC_ENV }}".deploy.parameters.stack_name' samconfig.yaml

      - name: build and deploy for ${{ env.RC_ENV }}
        env: 
          # RC_DST: ${{ env.RC_DST_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          # [[ ${GITHUB_REF##*/} != 'main' ]] && rc_path="releases-dev/$VERSION" || rc_path="releases/$VERSION"

          sam build && \
            sam deploy \
              --stack-name ${{ steps.get-stack.outputs.result }} \
              --config-env $RC_ENV \
              --region $AWS_REGION \
              --no-confirm-changeset \
              --no-fail-on-empty-changeset \
              --resolve-s3 \
              --tags "BuiltFrom=${VERSION}"

          echo "[INFO] Application components with version ${VERSION} successfully built and deployed into ${RC_ENV^^}"
