name: Build Application
run-name: Build Application from ${{ github.ref_name }}

on:
  workflow_dispatch:
  push:
    branches:
    - 'dev'
    paths:
    - 'VERSION'

concurrency:
  group: ${{ github.workflow }}-dev
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  RC_DST: ${{ vars.DEPLOYMENT_ARTEFACTS_S3_BUCKET }}
  BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN: ${{ vars.BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN }}
  PROD_ASSUME_ROLE_ARN: ${{ vars.PROD_ASSUME_ROLE_ARN }}

jobs:
  validation:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.validate.outputs.VERSION }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials against the BODS Shared-Services Account
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-app-build-validation
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      # Assume a role into the BODS-PROD account
      - name: Configure AWS Credentials in bodds-prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PROD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-app-build-validation
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          role-chaining: true

      - name: Validate Job Parameters
        id: validate
        run: |
          if [[ ${{ !(contains(fromJSON('["test", "main"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/v')) }} ]]; then
            if [[ ${GITHUB_REF_NAME} == 'dev' ]]; then
              COMMIT_MSG=$(git log -1 --pretty=%B)
              echo "[INFO] Commit message: $COMMIT_MSG"
              if [[ `echo "$COMMIT_MSG" | grep -Ei "merge.*main"` ]]; then
                echo "[INFO] Merge from main detected. Skipping build."
                exit 1
              fi

              new_version=$(yq e '.version' VERSION)
              echo "VERSION=${new_version}" >> "$GITHUB_OUTPUT"

              rc_path="$RC_DST/dqs/releases/$new_version"
              if [[ `aws s3 ls s3://$rc_path|head` ]]; then
                echo "[INFO] Release candidate version [${new_version}] already exists. Version number must be incremented to allow for a new build. Exiting"
                exit 1
              else
                echo "[INFO] Running on development branch, building as release for promotion through to live"
              fi
            else
              echo "[INFO] Running on feature branch, building as release for development environment"
              echo "VERSION=${GITHUB_REF_NAME//\//-}" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "[ERROR] It is only possible to build from dev/a feature branch. Exiting"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: validation

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Setup SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      # Configure AWS credentials against the BODS Shared-Services Account
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-app-build
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      # Assume a role into the BODS-PROD account
      - name: Configure AWS Credentials in bodds-prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PROD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-app-build
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          role-chaining: true

      - name: Package and Push Code
        env: 
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          [[ $VERSION =~ ^v[0-9]+(\.[0-9]+){2}$ ]] && rc_path="dqs/releases/$VERSION" || rc_path="dqs/releases-dev/$VERSION"

          sam build && \
            sam package \
              --s3-bucket $RC_DST \
              --s3-prefix $rc_path \
              --output-template-file packaged.yaml

          aws s3 cp packaged.yaml s3://$RC_DST/$rc_path/
          aws s3 cp samconfig.yaml s3://$RC_DST/$rc_path/

          echo "[INFO] Application with version [${VERSION}] successfully build and uploaded to deployment artefacts storage"

  commit-and-tag:
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && contains(github.ref, 'dev') }}
    runs-on: ubuntu-latest
    needs:
      - validation
      - build

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Commit and Push Changes
        env:
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          echo "[INFO] Tagging commit as version [${VERSION}]"

          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git config --global url.https://${{ github.token }}@github.com/.insteadOf https://github.com/

          git tag $VERSION
          git push --tags --force

  trigger-deploy-dev:
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && !(contains(fromJSON('["test", "main"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest
    needs: 
      - validation
      - build
      - commit-and-tag

    permissions:
      contents: write

    steps:
      - name: Trigger Remote for DEV
        uses: peter-evans/repository-dispatch@v3
        with:
          repository: ${{ github.repository }}
          event-type: automated-deploy-dev
          client-payload: '{ "environment": "dev", "release_version": "${{ needs.validation.outputs.VERSION }}" }'

      - name: Trigger Remote for DEV2
        uses: peter-evans/repository-dispatch@v3
        with:
          repository: ${{ github.repository }}
          event-type: automated-deploy-dev
          client-payload: '{ "environment": "dev2", "release_version": "${{ needs.validation.outputs.VERSION }}" }'
