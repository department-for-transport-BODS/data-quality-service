name: deploy application
run-name: deploy application from ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.release_version || github.event_name == 'workflow_dispatch' && github.ref_name }} @ ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment ||
    github.event_name == 'workflow_dispatch' && (
      (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) && 'prod' ||
      github.ref_name == 'test' && 'test' ||
      github.ref_name == 'uat' && 'uat' ||
      github.ref_name == 'dev' && 'dev'
    ) || 'sandbox' }}
on:
  workflow_dispatch:
    inputs:
      component:
        type: choice
        description: component to deploy. Defaults to 'all'
        default: 'all'
        options: 
        - 'all'
        - 'database'
        - 'application'
  repository_dispatch:
    types: [automated-deploy]

concurrency:
  group: ${{ github.workflow }}-${{ (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) && 'prod' ||
    github.ref_name == 'test' && 'test' ||
    github.ref_name == 'uat' && 'uat' ||
    github.ref_name == 'dev' && 'dev' || 'sandbox' }}
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  RC_CPT: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.component ||
    github.event_name == 'workflow_dispatch' && github.event.inputs.component }}
  RC_ENV: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment ||
    github.event_name == 'workflow_dispatch' && (
      (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) && 'prod' ||
      github.ref_name == 'test' && 'test' ||
      github.ref_name == 'uat' && 'uat' ||
      github.ref_name == 'dev' && 'dev'
    ) || 'sandbox' }}
  RC_VER: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.release_version ||
    github.event_name == 'workflow_dispatch' && (
      github.ref_name != 'main' && github.ref_name
    ) || 'null' }}
  RC_SRC_PREFIX: ${{ vars.DEPLOYMENT_ARTEFACTS_S3_BUCKET_PREFIX }}

permissions:
  id-token: write

jobs:
  validation:
    runs-on: pcoe-runner-linux-small-prod
    environment: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment ||
      github.event_name == 'workflow_dispatch' && (
        (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) && 'prod' ||
        github.ref_name == 'test' && 'test' ||
        github.ref_name == 'uat' && 'uat' ||
        github.ref_name == 'dev' && 'dev'
      ) || 'sandbox' }}
    outputs:
      AWS_ACCOUNT_ID: ${{ steps.set-vars.outputs.AWS_ACCOUNT_ID }}
      VERSION: ${{ steps.verify.outputs.VERSION }}

    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-app-deployment-validation
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: validate job parameters
        id: verify
        env:
          RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}
        run: |
          get_latest_version() {
            local bucket_name=$1
            local prefix_path=$2

            directories=$(aws s3 ls s3://$bucket_name/$prefix_path/ --summarize --human-readable | grep -E 'PRE|DIR' | awk '{print $2}')
            latest_version=""
            while IFS= read -r dir; do
              version=$(basename "$dir")
              if [[ $version =~ ^v[0-9]+(\.[0-9]+){2}$ ]]; then
                if [[ -z $latest_version ]] || (( $(echo "$version" | awk -F '.' '{print $1*10000+$2*100+$3}') > $(echo "$latest_version" | awk -F '.' '{print $1*10000+$2*100+$3}') )); then
                  latest_version=$version
                fi
              fi
            done <<< "$directories"
            echo "$latest_version"
          }

          if [[ ${RC_VER} != 'null' ]]; then
            echo """ \
              Executing deploy job using parameters:
                (Deployment Component)  - $RC_CPT
                (Release Version)       - ${RC_VER//\//-}
                (Target Environment)    - $RC_ENV
            """
            echo "VERSION=${RC_VER//\//-}" >> "$GITHUB_OUTPUT"
          else
            echo [INFO] Deploying from main branch. Using latest tagged version
            latest_version=$(get_latest_version $RC_SRC 'releases/itm')
            echo """ \
              Executing deploy job using parameters:
                (Deployment Component)  - $RC_CPT
                (Release Version)       - $latest_version (latest)
                (Target Environment)    - $RC_ENV
            """
            echo "VERSION=${latest_version}" >> "$GITHUB_OUTPUT"
          fi

      - name: set environment specific vars
        id: set-vars
        run: |
          echo "AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT

      - name: validate release candidate version
        env:
          RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}
          VERSION: ${{ steps.verify.outputs.VERSION }}
        run: |
          [[ $VERSION =~ ^v[0-9]+(\.[0-9]+){2}$ ]] && rc_path="$RC_SRC/releases/itm/$VERSION" || rc_path="$RC_SRC/releases-dev/itm/$VERSION"

          rc_backend_path="$rc_path/backend"
          rc_database_path="$rc_path/liquibase"

          # Database validation
          if [[ $RC_CPT == 'database' || $RC_CPT == 'all' ]]; then
            if [[ `aws s3 ls s3://$rc_database_path|head` ]]; then
              echo "[INFO] Release candidate version [${VERSION}] for component (DATABASE) successfully validated"
            else
              echo "[ERROR] Release candidate version [${VERSION}] does not exist for component (DATABASE). Exiting"
              exit 1
            fi
          fi

          # Application validation
          # Backend
          if [[ $RC_CPT == 'application' || $RC_CPT == 'all' ]]; then
            if [[ `aws s3 ls s3://$rc_backend_path|head` ]]; then
              echo "[INFO] Release candidate version [${VERSION}] for component (BACKEND) successfully validated"
            else
              echo "[ERROR] Release candidate version [${VERSION}] does not exist for component (BACKEND). Exiting"
              exit 1
            fi
          fi

  database:
    runs-on: pcoe-runner-linux-small-prod
    if: ${{ github.event.inputs.component == 'all' || github.event.inputs.component == 'database' ||
      (github.event_name == 'repository_dispatch' && github.event.client_payload.component == 'all') }}
    needs: validation

    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ needs.validation.outputs.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-database-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: deploy database migrations for ${{ env.RC_ENV }}
        ## TEMPORARY CHANGE TO AVOID DESTROYING DATA IN DB
        if: ${{ env.RC_ENV != 'sandbox' }}
        env:
          RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ needs.validation.outputs.AWS_ACCOUNT_ID }}
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          [[ $VERSION =~ ^v[0-9]+(\.[0-9]+){2}$ ]] && rc_path="releases/itm" || rc_path="releases-dev/itm"
          lambda_function_name="${{ vars.PROJECT_NAME }}-${RC_ENV}-pglifecycle-function"
          cat <<EOF > $GITHUB_WORKSPACE/payload.json
          {
            "type": "run_migrations",
            "authUser": "${{ vars.PROJECT_NAME }}_proxy_rw",
            "targetDatabase": "${{ vars.PROJECT_NAME }}",
            "databaseMigrations": {
              "bucketName": "${RC_SRC}",
              "bucketPrefix": "${rc_path}",
              "releaseVersion": "${VERSION}"
            }
          }
          EOF

          openssl base64 -out $GITHUB_WORKSPACE/encoded_payload.json -in $GITHUB_WORKSPACE/payload.json 
          response=$(aws lambda invoke --function-name $lambda_function_name --region $AWS_REGION --payload file://$GITHUB_WORKSPACE/encoded_payload.json response.txt 2>&1)
          status_code=$(cat response.txt | jq -r '.statusCode')
          status_code=${status_code:-"unset"}
          echo "Status Code is: $status_code"
          if [[ "$status_code" == "500" ]]; then
            echo "[ERROR] Deployment of application component (DATABASE) with version ${VERSION} failed with error:"
            echo "${response}"
            exit 1
          else
            response_payload=$(cat response.txt)
            echo "Response Payload: $response_payload"
            echo "[INFO] Application component (DATABASE) with version ${VERSION} successfully deployed into ${RC_ENV^^}"
          fi

  backend:
    runs-on: pcoe-runner-linux-small-prod
    if: ${{ github.event.inputs.component == 'all' || github.event.inputs.component == 'application' ||
      (github.event_name == 'repository_dispatch' && github.event.client_payload.component == 'all') }}
    needs: validation
    outputs:
      stack-name: ${{ steps.get-stack.outputs.result }}

    steps:
      - name: setup sam
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ needs.validation.outputs.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-backend-app-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: retrieve backend
        env:
          RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ needs.validation.outputs.AWS_ACCOUNT_ID }}
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          [[ $VERSION =~ ^v[0-9]+(\.[0-9]+){2}$ ]] && rc_path="releases/itm/$VERSION/backend" || rc_path="releases-dev/itm/$VERSION/backend"

          aws s3 cp s3://$RC_SRC/$rc_path/packaged.yaml .
          aws s3 cp s3://$RC_SRC/$rc_path/samconfig.yaml .
          echo "[INFO] Application component (BACKEND) with version ${VERSION} successfully downloaded"
      
      - name: get stack name
        id: get-stack
        uses: mikefarah/yq@v4.42.1
        with:
          cmd: yq -r '."${{ env.RC_ENV }}".deploy.parameters.stack_name' samconfig.yaml

      - name: deploy backend for ${{ env.RC_ENV }}
        env:
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          sam deploy \
            --template-file packaged.yaml \
            --stack-name ${{ steps.get-stack.outputs.result }} \
            --config-env $RC_ENV \
            --region $AWS_REGION \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --tags "BuiltFrom=${VERSION} ProjectName=${{ vars.PROJECT_NAME }} Environment=${RC_ENV}"
          echo "[INFO] Application component (BACKEND) with version ${VERSION} successfully deployed into ${RC_ENV^^}"