name: Deploy Application
run-name: Deploy Application to ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment ||
    github.event_name == 'release' && 'prod' ||
    contains(fromJSON('["workflow_dispatch", "push"]'), github.event_name) && (
      startsWith(github.ref, 'refs/tags/v') && 'prod' ||
      github.ref_name == 'main' && 'uat' ||
      github.ref_name == 'test' && 'test'
    ) || 'dev' }}
on:
  workflow_dispatch:
  push:
    branches:
    - 'test'
    - 'main'
    paths:
    - 'VERSION'
  release:
    types: [published]
  repository_dispatch:
    types:
    - automated-deploy-dev
    - automated-deploy-uat
    - automated-deploy-uat2

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment ||
    github.event_name == 'release' && 'prod' ||
    contains(fromJSON('["workflow_dispatch", "push"]'), github.event_name) && (
      startsWith(github.ref, 'refs/tags/v') && 'prod' ||
      github.ref_name == 'main' && 'uat' ||
      github.ref_name == 'test' && 'test'
    ) || 'dev' }}
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  RC_ENV: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment ||
    github.event_name == 'release' && 'prod' ||
    contains(fromJSON('["workflow_dispatch", "push"]'), github.event_name) && (
      startsWith(github.ref, 'refs/tags/v') && 'prod' ||
      github.ref_name == 'main' && 'uat' ||
      github.ref_name == 'test' && 'test'
    ) || 'dev' }}
  RC_VER: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.release_version ||
    github.event_name == 'release' && github.event.release.tag_name || 'null' }}
  RC_SRC: ${{ vars.DEPLOYMENT_ARTEFACTS_S3_BUCKET }}
  BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN: ${{ vars.BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN }}
  PROD_ASSUME_ROLE_ARN: ${{ vars.PROD_ASSUME_ROLE_ARN }}

jobs:
  validation:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.validate.outputs.VERSION }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        if: ${{ env.RC_VER == 'null' }}
        uses: actions/checkout@v4

      # Configure AWS credentials against the BODS Shared-Services Account
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-${{ env.RC_ENV }}-app-deploy-validation
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      # Assume a role into the BODS-PROD account
      - name: Configure AWS Credentials in bodds-prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PROD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-${{ env.RC_ENV }}-app-deploy-validation
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          role-chaining: true

      - name: Validate Job Parameters
        id: validate
        run: |
          if [[ ${RC_VER} != 'null' ]]; then
            echo """ \
              Executing deploy job using parameters:
                (Release Version)       - ${RC_VER//\//-}
                (Target Environment)    - $RC_ENV
            """
            echo "VERSION=${RC_VER//\//-}" >> "$GITHUB_OUTPUT"
          else
            current_version=$(yq e '.version' VERSION)

            echo """ \
              Executing deploy job using parameters:
                (Release Version)       - $current_version
                (Target Environment)    - $RC_ENV
            """
            echo "VERSION=${current_version}" >> "$GITHUB_OUTPUT"
          fi

      - name: Validate Release Candidate Version
        env:
          VERSION: ${{ steps.validate.outputs.VERSION }}
        run: |
          [[ $VERSION =~ ^v[0-9]+(\.[0-9]+){2}(_?.*)$ ]] && rc_path="$RC_SRC/dqs/releases/$VERSION" || rc_path="$RC_SRC/dqs/releases-dev/$VERSION"

          # Application validation
          if [[ `aws s3 ls s3://$rc_path|head` ]]; then
            echo "[INFO] Release candidate version [${VERSION}] successfully validated"
          else
            echo "[ERROR] Release candidate version [${VERSION}] does not exist. Exiting"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment ||
      github.event_name == 'release' && 'prod' ||
      contains(fromJSON('["workflow_dispatch", "push"]'), github.event_name) && (
        startsWith(github.ref, 'refs/tags/v') && 'prod' ||
        github.ref_name == 'main' && 'uat' ||
        github.ref_name == 'test' && 'test'
      ) || 'dev' }}
    needs: validation

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Setup SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      # Configure AWS credentials against the BODS Shared-Services Account
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-${{ env.RC_ENV }}-app-deploy
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      # Assume a role into the BODS-PROD account
      - name: Configure AWS Credentials in bodds-prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-${{ env.RC_ENV }}-app-deploy
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          role-chaining: true

      - name: Retrieve Code
        env:
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          [[ $VERSION =~ ^v[0-9]+(\.[0-9]+){2}(_?.*)$ ]] && rc_path="dqs/releases/$VERSION" || rc_path="dqs/releases-dev/$VERSION"

          aws s3 cp s3://$RC_SRC/$rc_path/packaged.yaml .
          aws s3 cp s3://$RC_SRC/$rc_path/samconfig.yaml .
          echo "[INFO] Application with version [${VERSION}] successfully downloaded"
      
      - name: Get Stack Name
        id: get-stack
        uses: mikefarah/yq@v4.45.2
        with:
          cmd: yq -r '."${{ env.RC_ENV }}".deploy.parameters.stack_name' samconfig.yaml

      - name: Deploy Application for ${{ env.RC_ENV }}
        env:
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          sam deploy \
            --template-file packaged.yaml \
            --stack-name ${{ steps.get-stack.outputs.result }} \
            --config-env $RC_ENV \
            --region $AWS_REGION \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --s3-bucket $RC_SRC --s3-prefix dqs/deployments/$RC_ENV \
            --tags "BuiltFrom=${VERSION} ProjectName=${{ vars.PROJECT_NAME }} Environment=${RC_ENV}"
          echo "[INFO] Application with version [${VERSION}] successfully deployed into ${RC_ENV^^}"

      - name: Update Confluence Page
        uses: robsteel24/update-confluence@v1
        with:
          confluence_base_url: ${{ vars.CONFLUENCE_BASE_URL }}
          confluence_page_id: ${{ vars.CONFLUENCE_PAGE_ID }}
          atlassian_username: ${{ secrets.ATLASSIAN_USERNAME }}
          atlassian_api_token: ${{ secrets.ATLASSIAN_API_TOKEN }}
          component: 'dqs'
          environment: ${{ env.RC_ENV }}
          version: ${{ needs.validation.outputs.VERSION }}
        continue-on-error: true

  deploy-uat2:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment: ${{ github.ref_name == 'main' && 'uat2' }}
    needs: validation

    env:
      RC_ENV: uat2

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Setup SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      # Configure AWS credentials against the BODS Shared-Services Account
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.BODS_DEFAULT_GITHUB_ACTIONS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-${{ env.RC_ENV }}-app-deploy
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      # Assume a role into the Environment Specific account
      - name: Configure AWS Credentials in bodds-prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.ASSUME_ROLE_ARN }}
          role-session-name: ${{ vars.PROJECT_NAME }}-${{ env.RC_ENV }}-app-deploy
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          role-chaining: true

      - name: Retrieve Code
        env:
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          [[ $VERSION =~ ^v[0-9]+(\.[0-9]+){2}(_?.*)$ ]] && rc_path="dqs/releases/$VERSION" || rc_path="dqs/releases-dev/$VERSION"

          aws s3 cp s3://$RC_SRC/$rc_path/packaged.yaml .
          aws s3 cp s3://$RC_SRC/$rc_path/samconfig.yaml .
          echo "[INFO] Application with version [${VERSION}] successfully downloaded"
      
      - name: Get Stack Name
        id: get-stack
        uses: mikefarah/yq@v4.45.2
        with:
          cmd: yq -r '."${{ env.RC_ENV }}".deploy.parameters.stack_name' samconfig.yaml

      - name: Deploy Application for ${{ env.RC_ENV }}
        env:
          VERSION: ${{ needs.validation.outputs.VERSION }}
        run: |
          sam deploy \
            --template-file packaged.yaml \
            --stack-name ${{ steps.get-stack.outputs.result }} \
            --config-env $RC_ENV \
            --region $AWS_REGION \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --s3-bucket $RC_SRC --s3-prefix dqs/deployments/$RC_ENV \
            --tags "BuiltFrom=${VERSION} ProjectName=${{ vars.PROJECT_NAME }} Environment=${RC_ENV}"
          echo "[INFO] Application with version [${VERSION}] successfully deployed into ${RC_ENV^^}"

      - name: Update Confluence Page
        uses: robsteel24/update-confluence@v1
        with:
          confluence_base_url: ${{ vars.CONFLUENCE_BASE_URL }}
          confluence_page_id: ${{ vars.CONFLUENCE_PAGE_ID }}
          atlassian_username: ${{ secrets.ATLASSIAN_USERNAME }}
          atlassian_api_token: ${{ secrets.ATLASSIAN_API_TOKEN }}
          component: 'dqs'
          environment: ${{ env.RC_ENV }}
          version: ${{ needs.validation.outputs.VERSION }}
        continue-on-error: true